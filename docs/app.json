[{"name":"app.R","content":"library(shiny)\r\n# getwd()\r\n# df = data.frame(x = runif(10))\r\n# write.csv(df, \"df.csv\")\r\n\r\n# setwd(dirname(rstudioapi::getSourceEditorContext()$path))\r\ndd = read.csv(\"df.csv\")\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n\r\n    # Application title\r\n    titlePanel(\"Old Faithful Geyser Data\"),\r\n\r\n    # Sidebar with a slider input for number of bins \r\n    sidebarLayout(\r\n        sidebarPanel(\r\n            sliderInput(\"bins\",\r\n                        \"Number of bins:\",\r\n                        min = 1,\r\n                        max = 50,\r\n                        value = 30)\r\n        ),\r\n\r\n        # Show a plot of the generated distribution\r\n        mainPanel(\r\n           plotOutput(\"distPlot\"),\r\n           plotOutput(\"histx\")\r\n        )\r\n    )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n\r\n    output$distPlot <- renderPlot({\r\n        # generate bins based on input$bins from ui.R\r\n        x    <- faithful[, 2]\r\n        bins <- seq(min(x), max(x), length.out = input$bins + 1)\r\n\r\n        # draw the histogram with the specified number of bins\r\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\r\n             xlab = 'Waiting time to next eruption (in mins)',\r\n             main = 'Histogram of waiting times')\r\n    })\r\n    output$histx = renderPlot({\r\n      hist(dd$x)\r\n    })\r\n    \r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n\r\n","type":"text"},{"name":"df.csv","content":"\"\",\"x\"\r\n\"1\",0.00662924139760435\r\n\"2\",0.565326399635524\r\n\"3\",0.832408305490389\r\n\"4\",0.611270876135677\r\n\"5\",0.59111016173847\r\n\"6\",0.33439417462796\r\n\"7\",0.671940451720729\r\n\"8\",0.373544078785926\r\n\"9\",0.880320225376636\r\n\"10\",0.673173006391153\r\n","type":"text"},{"name":"html_render_app.R","content":"library(shinylive)\r\nlibrary(httpuv)\r\n\r\nPATH = dirname(rstudioapi::getSourceEditorContext()$path)\r\nsetwd(PATH)\r\nshinylive::export(appdir = PATH, destdir = file.path(path, \"docs\"))\r\n\r\nhttpuv::runStaticServer(\"C:/Users/wafister/OneDrive - Hochschule Luzern/_code_library/RShiny/test_shinylive_webpage/docs\")\r\n","type":"text"},{"name":"workflow.txt","content":"1. develop app.R\r\n2. in other file, run shinylive::export(...)\r\n3. upload docs/ folder to github \r\n4. publish as > settings > pages > from \"main\" > from \"docs\"  (takes 5 min to upload)\r\n","type":"text"}]
